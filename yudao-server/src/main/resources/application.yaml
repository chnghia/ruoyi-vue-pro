spring:
  application:
    name: yudao-server

  profiles:
    active: local

  main:
    allow-circular-references: true # Allow circular references because the project uses a three‑layer architecture where this cannot be avoided.

  # Servlet configuration
  servlet:
    # 文件上传相关配置项
    multipart:
      max-file-size: 16MB # Single file size
      max-request-size: 32MB # Set total upload file size

  # Jackson configuration items
  jackson:
    serialization:
      write-dates-as-timestamps: true # Set the format of Date, using timestamps
      write-date-timestamps-as-nanoseconds: false # Disable nanosecond format, e.g., use 1611460870401 instead of 1611460870.401
      write-durations-as-timestamps: true # Set Duration format to timestamps
      fail-on-empty-beans: false # Allow serialization of beans with no properties

  # Cache configuration items
  cache:
    type: REDIS
    redis:
      time-to-live: 1h # Set expiration time to 1 hour

server:
  servlet:
    encoding:
      enabled: true
      charset: UTF-8 # Must set UTF‑8 to avoid garbled output in WebFlux streaming (AI scenario)
      force: true

--- #################### 接口文档配置 ####################

springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui
  default-flat-param-object: true # See https://doc.xiaominfo.com/docs/faq/v4/knife4j-parameterobject-flat-param documentation

knife4j:
  enable: true
  setting:
    language: zh_cn # Language set to Chinese (zh_CN)

# Workflow Flowable configuration
flowable:
  # 1. false: Default – on startup Flowable compares the saved DB schema version and throws an exception if mismatched
  # 2. true: On startup, updates all tables; existing tables are left untouched, missing ones are created automatically
  # 3. create_drop: Automatically creates tables on startup and drops them on shutdown
  # 4. drop_create: Drops old tables then creates new ones on startup
  database-schema-update: true # Set to false to initialize via https://github.com/flowable/flowable-sql
  db-history-used: true # flowable6 default true generates info tables, no manual setup required
  check-process-definitions: false # Set to false to disable automatic deployment of BPMN XML processes from /resources/processes
  history-level: audit # "full" stores the highest level of historical data, preserving all workflow details including node parameters

# MyBatis Plus configuration items
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true # Although default is true, we explicitly set it.
  global-config:
    db-config:
      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。
#      id-type: AUTO # Auto‑increment ID, suitable for databases like MySQL that support native auto‑increment
#      id-type: INPUT # User‑provided ID, suitable for Oracle, PostgreSQL, Kingbase, DB2, H2 databases
#      id-type: ASSIGN_ID # Assigned ID using Snowflake algorithm. For Oracle, PostgreSQL, Kingbase, DB2, H2 you must remove @KeySequence annotation from entities.
      logic-delete-value: 1 # Logical deleted flag value (default 1)
      logic-not-delete-value: 0 # Logical not‑deleted flag value (default 0)
    banner: false # Disable console banner printing
  type-aliases-package: ${yudao.info.base-package}.module.*.dal.dataobject
  encryptor:
    password: XDV71a+xqStEA3WH # Encryption/decryption key; can be generated via https://www.imaegoo.com/2020/aes-key-generator/

mybatis-plus-join:
  banner: false # Whether to print MyBatis‑Plus‑Join banner; default true
  sub-table-logic: true # Globally enable logical delete for sub‑tables; default true. Disabling removes it from join queries.
  ms-cache: true # Cache for MappedStatement interceptor; default true
  table-alias: t # Table alias (default "t")
  logic-del-type: on # Position of logical delete condition for sub‑tables; supports WHERE, ON. Default is ON.

# Spring Data Redis configuration
spring:
  data:
    redis:
      repositories:
        enabled: false # Project does not use Spring Data Redis repositories; disabled to speed up startup.

# VO conversion (data translation) related
easy-trans:
  is-enable-global: false # [Disabled by default due to performance concerns] Enable global translation (intercept all Spring MVC ResponseBody for automatic translation). Disable for high‑performance needs or use @IgnoreTrans on specific endpoints.

--- #################### Captcha related configuration ####################

aj:
  captcha:
    jigsaw: classpath:images/jigsaw # Sliding captcha base image path; defaults to built‑in image if not set. Prefix with "classpath:" to load from resources.
    pic-click: classpath:images/pic-click # Click‑captcha base image path; same loading rules as above.
    cache-type: redis # Cache type (local/redis...)
    cache-number: 1000 # Threshold for local cache; clears when reached.
    timing-clear: 180 # Local timed cleanup of expired cache (seconds); 0 disables.
    type: blockPuzzle # Captcha type; defaults to all three instantiated. blockPuzzle = sliding puzzle, clickWord = text selection, pictureWord = text input.
    water-mark: 芋道源码 # Watermark text at bottom‑right; can convert Chinese to Unicode via https://tool.chinaz.com/tools/unicode.aspx (Linux may require Unicode).
    interference-options: 0 # Sliding interference options (0/1/2)
    req-frequency-limit-enable: false # Whether to enable per‑minute request rate limiting (true|false)
    req-get-lock-limit: 5 # Lock get API after 5 failed attempts
    req-get-lock-seconds: 10 # Lock duration (seconds) after verification failure
    req-get-minute-limit: 30 # Max GET requests per minute
    req-check-minute-limit: 60 # Max CHECK requests per minute
    req-verify-minute-limit: 60 # Max VERIFY requests per minute

--- #################### 消息队列相关 ####################

# RocketMQ configuration items, corresponding to RocketMQProperties class
rocketmq:
  # Producer 配置项
  producer:
    group: ${spring.application.name}_PRODUCER # Producer group

spring:
  # Kafka configuration items, corresponding to KafkaProperties class
  kafka:
    # Kafka Producer 配置项
    producer:
      acks: 1 # 0 = no ack, 1 = leader ack, all = all replicas ack.
      retries: 3 # 发送失败时，重试发送的次数
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer # 消息的 value 的序列化
    # Kafka Consumer 配置项
    consumer:
      auto-offset-reset: earliest # Set initial consumer offset to "earliest". See blog for explanation.
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: '*'
    # Kafka Consumer Listener 监听器配置
    listener:
      missing-topics-fatal: false # By default, missing topics cause errors; set false to suppress.

--- #################### AI 相关配置 ####################

spring:
  ai:
    vectorstore: # Vector store
      redis:
        initialize-schema: true
        index-name: knowledge_index # Redis 中向量索引的名称：用于存储和检索向量数据的索引标识符，所有相关的向量搜索操作都会基于这个索引进行
        prefix: "knowledge_segment:" # Prefix for keys storing vector data in Redis; this prefix is added to each key, and each document is stored as a hash structure.
      qdrant: # Qdrant vector store
        initialize-schema: true # Initialize schema for Qdrant
        collection-name: knowledge_segment # Name of the vector collection in Qdrant used to store vector data; all related operations are performed on this collection.
        host: 127.0.0.1 # Host for Qdrant
        port: 6334 # Port for Qdrant
      milvus: # Milvus vector store
        initialize-schema: true # Initialize schema for Milvus
        database-name: default # Name of the database in Milvus
        collection-name: knowledge_segment # Name of the collection in Milvus used to store vector data; all related operations are performed on this collection.
        client:
          host: 127.0.0.1
          port: 19530
    qianfan: # Qianfan (Wenxin Yiyan)
      api-key: x0cuLZ7XsaTCU08vuJWO87Lg
      secret-key: R9mYF9dl9KASgi5RUq0FQt3wRisSnOcK
    zhipuai: # Zhipu AI
      api-key: 32f84543e54eee31f8d56b2bd6020573.3vh9idLJZ2ZhxDEs
    openai: # Official OpenAI
      api-key: sk-aN6nWn3fILjrgLFT0fC4Aa60B72e4253826c77B29dC94f17
      base-url: https://api.gptsapi.net
    azure: # Microsoft Azure OpenAI
      openai:
        endpoint: https://eastusprejade.openai.azure.com
    anthropic: # Anthropic Claude (no change)
      api-key: sk-muubv7cXeLw0Etgs743f365cD5Ea44429946Fa7e672d8942
    ollama: # Ollama model provider
      base-url: http://127.0.0.1:11434
      chat:
        model: llama3
    stabilityai: # Stability AI
      api-key: sk-e53UqbboF8QJCscYvzJscJxJXoFcFg4iJjl1oqgE7baJETmx
    dashscope: # DashScope (Tongyi Qianwen)
      api-key: sk-47aa124781be4bfb95244cc62f6xxxx
    minimax: # Minimax (https://www.minimaxi.com/)
      api-key: xxxx
    moonshot: # Moonshot (Kimi)
      api-key: sk-abc
    deepseek: # DeepSeek (no change)
      api-key: sk-e94db327cc7d457d99a8de8810fc6b12
      chat:
        options:
          model: deepseek-chat
    model:
      rerank: false # 是否开启“通义千问”的 Rerank 模型，填写 dashscope 开启
    mcp:
      server:
        enabled: false
        name: yudao-mcp-server
        version: 1.0.0
        instructions: 一个 MCP 示例服务
        sse-endpoint: /sse
      client:
        enabled: false
        name: mcp
        sse:
          connections:
            filesystem:
              url: http://127.0.0.1:8089
              sse-endpoint: /sse

yudao: # Yudao platform configuration
  ai:
    gemini: # Google Gemini
      enable: true
      api-key: AIzaSyAVoBxgoFvvte820vEQMma2LKBnC98bqMQ
      model: gemini-2.5-flash
    doubao: # ByteDance Doubao
      enable: true
      api-key: 5c1b5747-26d2-4ebd-a4e0-dd0e8d8b4272
      model: doubao-1-5-lite-32k-250115
    hunyuan: # Tencent Hunyuan
      enable: true
      api-key: sk-abc
      model: hunyuan-turbo
    siliconflow: # SiliconFlow
      enable: true
      api-key: sk-epsakfenqnyzoxhmbucsxlhkdqlcbnimslqoivkshalvdozz
      model: deepseek-ai/DeepSeek-R1-Distill-Qwen-7B
    xinghuo: # iFlytek Xinghuo
      enable: true
      appKey: 75b161ed2aef4719b275d6e7f2a4d4cd
      secretKey: YWYxYWI2MTA4ODI2NGZlYTQyNjAzZTcz
      model: x1
    baichuan: # Baichuan AI
      enable: true
      api-key: sk-abc
      model: Baichuan4-Turbo
    midjourney: # MidJourney image generation
      enable: true
  #    base-url: https://api.holdai.top/mj-relax/mj
      base-url: https://api.holdai.top/mj
      api-key: sk-dZEPiVaNcT3FHhef51996bAa0bC74806BeAb620dA5Da10Bf
      notify-url: http://java.nat300.top/admin-api/ai/image/midjourney/notify
    suno: # Suno audio generation
      enable: true
  #    base-url: https://suno-55ishh05u-status2xxs-projects.vercel.app
      base-url: http://127.0.0.1:3001
    web-search: # Web search integration
      enable: true
      api-key: sk-40500e52840f4d24b956d0b1d80d9abe

--- #################### Yudao related configuration ####################

yudao:
  info:
    version: 1.0.0
    base-package: cn.iocoder.yudao
  web:
    admin-ui:
      url: http://dashboard.yudao.iocoder.cn # URL of the admin backend UI
  xss:
    enable: false # Disable XSS protection
    exclude-urls: # The following two URLs are for demonstration only; can be removed.
      - ${spring.boot.admin.context-path}/** # Do not process requests to Spring Boot Admin
      - ${management.endpoints.web.base-path}/** # Do not process Actuator requests
  security:
    permit-all_urls: # URLs that bypass authentication
      - /admin-api/mp/open/** # 微信公众号开放平台，微信回调接口，不需要登录
  api-encrypt:
    enable: true # Enable API encryption
    algorithm: AES # Encryption algorithm (supports AES, RSA, etc.)
    request-key: 52549111389893486934626385991395 # [AES example] Request encryption key; must be 16/24/32 bytes.
    response-key: 96103715984234343991809655248883 # [AES example] Response encryption key; must be 16/24/32 bytes.
#    request-key: MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAKWzasimcZ1icsWDPVdTXcZs1DkOWjI+m9bTQU8aOqflnomkr6QO1WWeSHBHzuJGsTlV/ZY2pFfq/NstKC94hBjx7yioYJvzb2bKN/Uy4j5nM3iCF//u0RiFkkY8j0Bt/EWoFTOb6RHf8cHIAjbYYtP3pYzbpCIwryfe0g//KIuzAgMBAAECgYADDjZrYcpZjR2xr7RbXmGtzYbyUGXwZEAqa3XaWBD51J2iSyOkAlQEDjGmxGQ3vvb4qDHHadWI+3/TKNeDXJUO+xTVJrnismK5BsHyC6dfxlIK/5BAuknryTca/3UoA1yomS9ZlF3Q0wcecaDoEnSmZEaTrp9T3itPAz4KnGjv5QJBAN5mNcfu6iJ5ktNvEdzqcxkKwbXb9Nq1SLnmTvt+d5TPX7eQ9fCwtOfVu5iBLhhZzb5PJ7pSN3Zt6rl5/jPOGv0CQQC+vETX9oe1wbxZSv6/RBGy0Xow6GndbJwvd89PcAJ2h+OJXWtg/rRHB3t9EQm7iis0XbZTapj19E4U6l8EibhvAkEA1CvYpRwmHKu1SqdM+GBnW/2qHlBwwXJvpoK02TOm674HR/4w0+YRQJfkd7LOAgcyxJuJgDTNmtt0MmzS+iNoFQJAMVSUIZ77XoDq69U/qcw7H5qaFcgmiUQr6QL9tTftCyb+LGri+MUnby96OtCLSdvkbLjIDS8GvKYhA7vSM2RDNQJBAKGyVVnFFIrbK3yuwW71yvxQEGoGxlgvZSezZ4vGgqTxrr9HvAtvWLwR6rpe6ybR/x8uUtoW7NRBWgpiIFwjvY4= # 【RSA 案例】请求解密的私钥
#    response-key: MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDh/CHyBcS/zEfVyINVA7+c9Xxl0CPdxPMK1OIjxaLy/7BLfbkoEpI8onQtjuzfpuxCraDem9bu3BMF0pMH95HytI3Vi0kGjaV+WLIalwgc2w37oA2sbsmKzQOP7SDLO5s2QJNAD7kVwd+Q5rqaLu2MO0xVv+0IUJhn83hClC0L5wIDAQAB # 【RSA 案例】响应加密的公钥
  websocket: # WebSocket configuration
    enable: true # Enable WebSocket
    path: /infra/ws # Path
    sender-type: local # Message sender type; options: local, redis, rocketmq, kafka, rabbitmq
    sender-rocketmq:
      topic: ${spring.application.name}-websocket # RocketMQ topic for messages
      consumer-group: ${spring.application.name}-websocket-consumer # RocketMQ consumer group for messages
    sender-rabbitmq:
      exchange: ${spring.application.name}-websocket-exchange # RabbitMQ exchange for messages
      queue: ${spring.application.name}-websocket-queue # RabbitMQ queue for messages
    sender-kafka:
      topic: ${spring.application.name}-websocket # Kafka topic for messages
      consumer-group: ${spring.application.name}-websocket-consumer # Kafka consumer group for messages
  swagger: # Swagger UI configuration
    title: Yudao Rapid Development Platform
    description: Provides all features for admin backend and user app.
    version: ${yudao.info.version}
    url: ${yudao.web.admin-ui.url}
    email: xingyu4j@vip.qq.com
    license: MIT
    license-url: https://gitee.com/zhijiantianya/ruoyi-vue-pro/blob/master/LICENSE
  codegen:
    base-package: ${yudao.info.base-package}
    db-schemas: ${spring.datasource.dynamic.datasource.master.name}
    front-type: 20 # 前端模版的类型，参见 CodegenFrontTypeEnum 枚举类
    vo-type: 10 # VO 的类型，参见 CodegenVOTypeEnum 枚举类
    delete-batch-enable: true # Generate batch delete APIs
    unit-test-enable: false # Generate unit tests
  tenant: # Multi‑tenant configuration
    enable: true # Enable multi‑tenant support
    ignore-urls: # URLs to ignore for tenant handling
      - /jmreport/* # JmReport cannot carry tenant ID
    ignore-visit-urls: # URLs to bypass tenant checks on visits
      - /admin-api/system/user/profile/**
      - /admin-api/system/auth/**
    ignore-tables: # Tables to exclude from tenant processing
    ignore-caches: # Cache keys to ignore for tenant handling
      - user_role_ids
      - permission_menu_ids
      - oauth_client
      - notify_template
      - mail_account
      - mail_template
      - sms_template
      - iot:device
      - iot:thing_model_list
  sms-code: # SMS verification code configuration
    expire-times: 10m # Expiration time
    send-frequency: 1m # Minimum interval between sends
    send-maximum-quantity-per-day: 10 # Max sends per day
    begin-code: 9999 # Set to 9999 for convenient testing.
    end-code: 9999 # Same as above.
  trade: # Trade-related settings
    order: # Order configuration
      pay-expire-time: 2h # Payment expiration time
      receive-expire-time: 14d # Delivery expiration time
      comment-expire-time: 7d # Comment expiration time
      status-sync-to-wxa-enable: true # Sync order status to WeChat Mini Program
    express: # Express delivery settings
      client: kd_100 # Default express client
      kd-niao: # KdNiao configuration
        api-key: cb022f1e-48f1-4c4a-a723-9001ac9676b8 # API key for KdNiao
        business-id: 1809751 # Business ID for KdNiao
        request-type: 1002 # Request type: free=1002, paid=8001
      kd100: # Kd100 configuration
        key: pLXUGAwK5305 # API key for Kd100
        customer: E77DF18BE109F454A5CD319E44BF5177 # Customer ID for Kd100
  iot: # IoT configuration
    message-bus: # Message bus settings
      type: redis # Type of message bus

debug: false